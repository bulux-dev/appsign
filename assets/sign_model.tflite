import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:tflite_flutter/tflite_flutter.dart';

class SignDetectionModule extends StatefulWidget {
  const SignDetectionModule({super.key});

  @override
  State<SignDetectionModule> createState() => _SignDetectionModuleState();
}

class _SignDetectionModuleState extends State<SignDetectionModule> {
  CameraController? _cameraController;
  late List<CameraDescription> _cameras;
  bool _isCameraInitialized = false;
  String _statusMessage = "Cargando el modelo de señas...";
  Interpreter? _interpreter;
  bool _isModelLoaded = false;
  String _detectedSign = "Esperando seña...";

  @override
  void initState() {
    super.initState();
    _loadModelAndInitializeCamera();
  }

  Future<void> _loadModelAndInitializeCamera() async {
    // 1. Carga el modelo de Machine Learning desde los assets.
    try {
      _interpreter = await Interpreter.fromAsset("assets/sign_model.tflite");
      setState(() {
        _isModelLoaded = true;
        _statusMessage = "Modelo cargado. Solicitando permisos de cámara...";
      });
    } catch (e) {
      print("Error al cargar el modelo: $e");
      setState(() {
        _statusMessage = "Error: No se pudo cargar el modelo.";
      });
      return;
    }

    // 2. Solicita permiso de acceso a la cámara.
    final status = await Permission.camera.request();

    if (status.isGranted) {
      try {
        _cameras = await availableCameras();
        if (_cameras.isNotEmpty) {
          _cameraController = CameraController(
            _cameras.first,
            ResolutionPreset.high,
            imageFormatGroup: ImageFormatGroup.yuv420,
          );

          await _cameraController!.initialize();

          if (!mounted) {
            return;
          }
          setState(() {
            _isCameraInitialized = true;
            _statusMessage = "Cámara lista para la detección.";
          });

          // Inicia el flujo de la cámara para la detección en vivo
          _cameraController!.startImageStream((CameraImage image) {
            _runInference(image);
          });
        }
      } on CameraException catch (e) {
        print("Error al inicializar la cámara: $e");
        setState(() {
          _statusMessage = "Error: No se pudo inicializar la cámara.";
        });
      }
    } else {
      setState(() {
        _statusMessage = "Permiso de cámara denegado.";
      });
    }
  }

  // Este método simula la lógica de procesamiento de cada fotograma.
  void _runInference(CameraImage image) {
    if (_isModelLoaded && _interpreter != null) {
      // Aquí iría la lógica real para procesar la imagen y
      // pasarla al modelo de TFLite para obtener el resultado.
      // Por ahora, solo actualizamos el texto para mostrar que la cámara está funcionando.
      setState(() {
        _detectedSign = "¡Seña detectada!";
      });
    }
  }

  @override
  void dispose() {
    _cameraController?.dispose();
    _interpreter?.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!_isCameraInitialized || !_isModelLoaded) {
      return Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const CircularProgressIndicator(),
              const SizedBox(height: 20),
              Text(_statusMessage),
            ],
          ),
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Detección de Señas'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
      ),
      body: Stack(
        children: [
          SizedBox(
            width: double.infinity,
            height: double.infinity,
            child: CameraPreview(_cameraController!),
          ),
          Align(
            alignment: Alignment.bottomCenter,
            child: Container(
              padding: const EdgeInsets.all(16),
              color: Colors.black54,
              width: double.infinity,
              child: Text(
                "Seña: $_detectedSign",
                style: const TextStyle(color: Colors.white, fontSize: 24, fontWeight: FontWeight.bold),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ],
      ),
    );
  }
}
